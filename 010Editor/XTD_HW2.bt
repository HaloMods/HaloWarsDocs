//------------------------------------------------
//--- 010 Editor v3.0 Binary Template
//
//      File: XTD_HW2.bt
//    Author: kornman00
//   Version: 0.1
//   Purpose: Parse HaloWars2 XTD files.
//  Category: HaloWars
// File Mask: *.xtd, *.XTD
//
// More information available at
//  https://github.com/KornnerStudios/HaloWarsDocs
//------------------------------------------------

#define WELL_KNOWN_ECF
#include "ECF.bt"

enum
{
	cXTD_Version               = 0x000D,

	cXTD_XTDHeader             = 0x1111,
	cXTD_TerrainChunk          = 0x2222,

	cXTD_AtlasChunk            = 0x8888,

	cXTD_TessChunk             = 0xAAAA, // deprecated in HW2, but I still see it in XTD data

	cXTD_AlphaChunk            = 0xDDDD,
};

struct XTD_XTDHeader
{
	struct WorldBB
	{
		XMVECTOR Min;
		XMVECTOR Max;
	};

	int Version;
	if (Version != cXTD_Version)
		return;

	int NumXVerts;
	int NumXChunks;
	float TessRangeFactor;
	float MaxTessFactor;
	float TileScale;
	WorldBB World; // The editor writes this, but the game does not actually use it
};

typedef struct
{
	int GridX, GridZ;
	AABB BBox;
	float NormalsVariance;

	// Neighbour faces:
	//North = 0,
	//South,
	//East,
	//West,
	//NorthEast,
	//NorthWest,
	//SouthEast,
	//SouthWest,
	float NeighbourNormalsVariances[8];
} XTD_TerrainChunk <name=XTD_TerrainChunkGetName>;
string XTD_TerrainChunkGetName(XTD_TerrainChunk& chunk)
{
	local string name;
	SPrintf(name, "TerrainChunk(%d, %d)", chunk.GridX, chunk.GridZ);
	return name;
}

struct XTD_AtlasChunk(int numXVerts)
{
	if (numXVerts > 0)
		float Heightfield[numXVerts*numXVerts] <optimize=true>;

	if (numXVerts > 0)
		float Normals[numXVerts*numXVerts] <optimize=true>;

	if (numXVerts > 0)
		float Tangents[numXVerts*numXVerts] <optimize=true>;
};

struct XTD_TessChunk
{
	struct PatchBB
	{
		XMVECTOR Min;
		XMVECTOR Max;
	};

	int NumXPatches, NumZPatches;

	local int numQuads = NumXPatches * NumZPatches;
	if (numQuads > 0)
		BYTE MaxPatchTessallation[ numQuads ] <optimize=true>;

	if (numQuads > 0)
		PatchBB PatchBBs[ numQuads ] <optimize=true>;
};

struct ECF_XTD
{
	if (SeekToChunkById(FileStream, cXTD_XTDHeader) < 0)
	{
		ReadAllChunkBytes(FileStream);
		return;
	}
	XTD_XTDHeader Header;
	if (Header.Version != cXTD_Version)
	{
		ReadAllChunkBytes(FileStream);
		return;
	}

	ECFChunkIteratorNew();
	local ECFChunkIteratorNextResult iterNextResult;
	while ((iterNextResult = ECFChunkIteratorNext(FileStream)) != kECFChunkIteratorNextEndOfList)
	{
		if (iterNextResult == kECFChunkIteratorNextNoData)
			continue;

		switch (ECFChunkIterator_ID)
		{
			case cXTD_TerrainChunk:
				XTD_TerrainChunk TerrainChunk;
				break;
			case cXTD_AtlasChunk:
				XTD_AtlasChunk AtlasChunk(Header.NumXVerts);
				break;
			case cXTD_TessChunk: // this is deprecated in HW2, but I'm still seeing it in files
				BigEndian();
				XTD_TessChunk TessChunk;
				LittleEndian();
				break;
			case cXTD_AlphaChunk:
				BYTE Alpha[ Header.NumXVerts*Header.NumXVerts ] <optimize=true>;
				break;

			case cXTD_XTDHeader:
				// we've already handled this at the start
				break;
			default:
				ECFChunkIteratorReadCurrentChunkData();
				break;
		}
	}
};
LittleEndian();
ECF_XTD XTD <open=true>;
